{"version":3,"sources":["logo.svg","components/Home/Home.js","components/Calculator/Calculator.js","components/CurrencyConvertor/CurrencyConvertor.js","components/Routes/Routes.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Container","fluid","Row","Col","Button","variant","Calc","Currency","Routes","Navbar","collapseOnSelect","expand","bg","Brand","to","style","textDecoration","color","alt","src","logo","width","height","className","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","as","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,kMCG5B,SAASC,IACpB,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,MAGJ,kBAACA,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,qBAEF,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QAAhB,yBCPGC,MAJf,WACI,OAAO,qCCOIC,MANf,WACI,OAAO,yC,iDCOI,SAASC,IACpB,OACE,kBAAC,IAAD,KACE,6BACI,kBAACR,EAAA,EAAD,CAAWC,OAAK,GAChB,kBAACQ,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOP,QAAQ,QACnD,kBAACI,EAAA,EAAOI,MAAR,KACI,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAOC,MAAM,UAAnD,aACe,IACX,yBACIC,IAAI,GACJC,IAAKC,IACLC,MAAM,KACNC,OAAO,KACPC,UAAU,+BAItB,kBAACd,EAAA,EAAOe,OAAR,CAAeC,gBAAc,0BAC7B,kBAAChB,EAAA,EAAOiB,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKL,UAAU,WAEX,kBAACK,EAAA,EAAIC,KAAL,CAAUC,SAAS,IAAIC,GAAIF,IAAMf,GAAG,gBAApC,QACA,kBAACc,EAAA,EAAIC,KAAL,CAAUC,SAAS,IAAKC,GAAIF,IAAMf,GAAG,oBAArC,cACA,kBAACc,EAAA,EAAIC,KAAL,CAAUC,SAAS,IAAKC,GAAIF,IAAMf,GAAG,aAArC,0BAQd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,KAAK,oBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAACjC,EAAD,U,MCjDC,SAASkC,IACtB,OACE,yBAAKV,UAAU,OACb,kBAACf,EAAD,OCKc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b08b605.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.07d11237.svg\";","import React from 'react';\r\nimport {Container,Row, Col,Button} from 'react-bootstrap';\r\n\r\nexport default function Home() {\r\n    return(\r\n        <Container fluid>\r\n            <Row>\r\n                \r\n            </Row>\r\n        <Row>\r\n          <Col>\r\n            <Button variant=\"success\">Basic Calculator</Button>\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"info\">Currency Converter</Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\n\r\n\r\nfunction Calc() {\r\n    return <h2>Calc</h2>;\r\n  }\r\n\r\nexport default Calc;","import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction Currency() {\r\n    return <h2>Currency</h2>;\r\n  }\r\n\r\n\r\n\r\nexport default Currency;","import React from 'react';\r\nimport Home from '../Home/Home';\r\nimport Calc from '../Calculator/Calculator';\r\nimport Currency from '../CurrencyConvertor/CurrencyConvertor';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport {Nav,Navbar,Container} from 'react-bootstrap';\r\nimport logo from '../../logo.svg';\r\n\r\nexport default function Routes(){\r\n    return(\r\n      <Router>\r\n        <div>\r\n            <Container fluid>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>\r\n                    <Link to=\"/\" style={{ textDecoration: 'none',color:\"white\" }}>\r\n                        CloudMark {' '}\r\n                        <img\r\n                            alt=\"\"\r\n                            src={logo}\r\n                            width=\"30\"\r\n                            height=\"30\"\r\n                            className=\"d-inline-block align-top\"\r\n                        />\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        {/* eventKey is required for collapse on select to work */}\r\n                        <Nav.Link eventKey=\"1\" as={Link} to=\"/Calculator/\">Home</Nav.Link>\r\n                        <Nav.Link eventKey=\"2\"  as={Link} to=\"/Calculator/calc\">Calculator</Nav.Link>\r\n                        <Nav.Link eventKey=\"3\"  as={Link} to=\"/currency\">Currency Convertor</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            </Container>\r\n  \r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/Calculator/calc\">\r\n              <Calc />\r\n            </Route>\r\n            <Route path=\"/currency\">\r\n              <Currency />\r\n            </Route>\r\n            <Route path=\"/Calculator/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }","import React from \"react\";\nimport Routes from '../Routes/Routes';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}