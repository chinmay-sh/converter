{"version":3,"sources":["components/Home/assets/currencyConvImg.svg","logo.svg","components/Home/assets/calcImg.svg","components/Home/Home.js","components/Calculator/Calculator.js","components/CurrencyConvertor/CurrencyConvertor.js","components/Routes/Routes.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Container","fluid","Row","Col","Card","bg","style","width","borderRadius","margin","Img","variant","src","currencyImg","Body","Title","Text","Button","as","Link","to","Calc","className","size","Currency","Routes","Navbar","collapseOnSelect","expand","Brand","textDecoration","color","alt","logo","height","Toggle","aria-controls","Collapse","id","Nav","eventKey","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e70ee215.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currencyConvImg.59f032e0.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.07d11237.svg\";","module.exports = __webpack_public_path__ + \"static/media/calcImg.07d11237.svg\";","import React from 'react';\r\nimport {Container,Row, Col,Button,Card} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport CalcImg from './assets/calcImg.svg';\r\nimport currencyImg from './assets/currencyConvImg.svg';\r\n\r\nexport default function Home() {\r\n    return(\r\n        <Container fluid>\r\n            <Row>\r\n                <Col>\r\n                    <h2>Welcome to Universal Calculator</h2>\r\n                </Col>\r\n            </Row>\r\n            <br />\r\n        <Row>\r\n          {/* \r\n            <Col>\r\n          <br />\r\n            <Card bg=\"dark\" style={{ width: '18rem',borderRadius:\"20px\",margin:\"auto\" }}>\r\n                <Card.Img variant=\"top\" src={CalcImg} style={{width:\"70%\",margin:\"auto\"}} />\r\n                <Card.Body>\r\n                    <Card.Title><h3>Calculator</h3></Card.Title>\r\n                    <Card.Text>\r\n                        A Simple Calculator\r\n                    </Card.Text>\r\n                    <Button variant=\"info\" as={Link} to=\"/calc\">RUN</Button>\r\n                </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          */}\r\n          <Col>\r\n          <br/>\r\n            <Card bg=\"dark\" style={{ width: '18rem',borderRadius:\"20px\",margin:\"auto\"  }}>\r\n                <Card.Img variant=\"top\" src={currencyImg} style={{width:\"70%\",margin:\"auto\"}} />\r\n                <Card.Body>\r\n                    <Card.Title><h3>Currency Converter</h3></Card.Title>\r\n                    <Card.Text>\r\n                        A Simple Currency Converter\r\n                    </Card.Text>\r\n                    <Button variant=\"info\" as={Link} to=\"/currency\">RUN</Button>\r\n                </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <br/>\r\n      </Container>\r\n    );\r\n  }\r\n  ","import React from 'react';\r\nimport {Button,Container,Row,Col} from 'react-bootstrap';\r\nimport './Calculator.css';\r\n\r\nfunction add(num1,num2){\r\n    return num1 + num2;\r\n}\r\n\r\nfunction sub(num1,num2){\r\n    return num1 - num2;\r\n}\r\n\r\nfunction Calc() {\r\n    return(\r\n        <div>\r\n            <Container>\r\n                {/*DisplayField*/}\r\n                <Row>\r\n                    <Col>\r\n                    hi\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"danger\" >C</Button>\r\n                    </Col>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"warning\" >/</Button>\r\n                    </Col>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"warning\" >*</Button>\r\n                    </Col>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"warning\" >-</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"info\" >7</Button>\r\n                    </Col>\r\n                    <Col className=\"buttonCol\">\r\n                        <Button size=\"lg\" variant=\"info\" >8</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >9</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"warning\" >+</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >4</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >5</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >6</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"warning\" >x^2</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >1</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >2</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"info\" >3</Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button size=\"lg\" variant=\"success\" >=</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Calc;","import React from 'react';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\n\r\n\r\n\r\nfunction Currency() {\r\n    return(\r\n      <div>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              Hi\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\nexport default Currency;","import React from 'react';\r\nimport Home from '../Home/Home';\r\nimport Calc from '../Calculator/Calculator';\r\nimport Currency from '../CurrencyConvertor/CurrencyConvertor';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport {Nav,Navbar,Container} from 'react-bootstrap';\r\nimport logo from '../../logo.svg';\r\n\r\nexport default function Routes(){\r\n    return(\r\n      <Router>\r\n        <div>\r\n            <Container fluid>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>\r\n                    <Link to=\"/\" style={{ textDecoration: 'none',color:\"white\" }}>\r\n                        CloudMark {' '}\r\n                        <img\r\n                            alt=\"\"\r\n                            src={logo}\r\n                            width=\"30\"\r\n                            height=\"30\"\r\n                            className=\"d-inline-block align-top\"\r\n                        />\r\n                    </Link>\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\" >\r\n                    <Nav className=\"ml-auto\" >\r\n                        {/* eventKey is required for collapse on select to work */}\r\n                        <Nav.Link style={{ textDecoration: 'none',color:\"white\" }} eventKey=\"1\" as={Link} to=\"/\">Home</Nav.Link>\r\n                        <Nav.Link style={{ textDecoration: 'none',color:\"white\" }} eventKey=\"2\"  as={Link} to=\"/calc\">Calculator</Nav.Link>\r\n                        <Nav.Link style={{ textDecoration: 'none',color:\"white\" }} eventKey=\"3\"  as={Link} to=\"/currency\">Currency Convertor</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            </Container>\r\n  \r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/calc\">\r\n              <Calc />\r\n            </Route>\r\n            <Route path=\"/currency\">\r\n              <Currency />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }","import React from \"react\";\nimport Routes from '../Routes/Routes';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}